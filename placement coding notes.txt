-->OPERATORS:-
================
-->Arithmetic operators:-
  -------------------------
  -->+,-,*,/,%
-->Relational operators:-
--------------------------
  -->>,<,>=,<=,==,!=
-->Logical Operators:-
--------------------------
  -->&&,||,!
-------------------------
-->Bitwise Operators:-(Mainly works with Binary numbers)
---------------------------
--> &(Bitwise And) , |(Bitwise or) , ^(Bitwise xor),>>(Right shift),<<(Left shift),~(Bitwise Not)
------------------------------------------------------------------------------------------------------
-->Assignment operators:-(To Assign a value to the variable)
---------------------------------
-->=, +=,-=,*=,/= , etc ..
-------------------------------------
-->Ternary operator:-
-----------------------
--> (condition1 > condition 2)?(true statement):(false statement);
=====================================================================
-->CONTROL STATEMENTS:-
=============================
->simple if
-->if-else 
-->if-else -if else
-->Nested if statements
-->switch block
syntax:-
   ->  if(condition checking){
         statement;
     }
  
   -> if(condition checking){
           statement;
     }
     else{
         statement;
     }
   ->if(conditon checking){
         statement;
     }
     else if(conditon checking){
          statement;
     }
  ->if(condition1 checking){
         if(condition2 checking ){
                   statement1;
         }
         else{
             statement2;
         }
    }
    else{
        statement3;
    }
  ->int ch=2;
    switch(ch-->expression)
    {
         case 0:pritnf("statement");
                break;
         case 1:printf("statement2");
                break;
         ....
         default:printf("default statement");
                 break;
    }
====================================================================
     
-->LOOPING STATEMENTS:-
==========================
-->There Three looping statements they are for,while and do while.
-->do while no that much important.
syntaxes:-
----------
/* for(intialization,condition checking, increment or decrement)
 {
         statements;
 }*/
-->for loop is countbale loop .
/*initialization;
  while(conditon checking)
  {
    statement;
    increment or decrement;
  }
-->while loop is a conditional based loop but we use for countable loop
-->for(int i=0;i<=10;i++)
  {
     printf("%d ",i); //0,1,2,3,4,5,6,7,8,9,10
  }
-->for(int i=10;i>=1;i--)
   { 
      printf("%d ", i); //10,9,8,7,6,5,4,3,2,1
   }
-->int i=1;
   while(i<=10){
      printf("%d",i);
      i++;
   }
-->the break and continue statements should be wirtten in the conditions only in for or while loops.
-->for(int i=0;i<10;i++)
   {
     printf("%d", i);
     if(i%4==0)
     {
        break;
      }
  }
-->for(int i=1;i<100;)
   {
       printf("%d",i); // 1 1 1 1 ...
   }
-->The above loop execute for infinite times.
-->for(int i=1;i<=10;)
   {
     printf("%d", ++i); //pre-increment -->first increment the value and then print the value.
     printf("%d", i++); //post-increment  -->first print the value and then increment.
-->int i=0;n=10;
   for(;;)
   {
      printf("%d",i);
      i*=2;
   }
   -->the loop will be executed for infinite times with 0 as output.
-->int i=1;n=10;
   for(;;)
  {
    printf("%d", i); // 1 2 4 8 
    i*=2;
  }
--> short unsigned int i=1;n=10;
    for(;;)
    {
      if(i==0)
      {
       break;
      }
      printf("%hu" ,i);
       i*=2;
    }
-->int i=1;n=100;
   while(i<=n){
     if(i%3==0 && i%5==0){
         i+=1;                  -->skips the value that is divisible by both 3 and 5.
         continue;
      } 
     printf("%d",i);
      i+=1;
   }
-->int i=1;n=100;
   while(i<=n){
         if(i%3==0 && i%5==0){
               break;               -->breaks the loop when a number divisible by both 3 and 5 and print hai .
             }     
             printf("%d",i);
          i+=1;
    }
    printf("Hai');
-->for(int i=1;i<=10;i++);    -->there is no relationship between for loop and the statement.
   {
      printf("%d " , i);   // the output will be 11.
   }
-->int p=7,q=3,r=6;
   for(r=3;r<=4;r++)
       p=(q+12)+r;
   for(r=5;r<=6;r++)      // the ouput is 15.
      p=(q+q)+r;
   printf("%d " ,p+q);
-->hu -->signed short int
-->u -->short int
=================================================================================================================
-->FUNCTION AND RECURSION:-
============================
-->3 parts 
   ->function prototype declaration
   ->function definition
   ->function call
-->when working of functions we need to check for the following five points
      --> name of func, number of arguments,datatype of arguments, is that fucntion has return value , datatype of return value.	
-->#include<stdio.h>
   int add(int a ,int b)
    {
        return a+b;
    }
   int main()
   {
        int a=10,b=5;
        int sum=add(a,b); //func call      name of func, number of arguments,datatype of arguments, is that has return value , datatype of return value.	
        printf("%d ", sum);
    }
----------------------------------------------------------
-->#include<stdio.h>
   int func(int x)
   {
      return 100,200,300;
   }
   int main()
  {
    int a=10;
    int res=func(a);
    printf("%d ",res);   the output will be 300.
  }
----------------------------------------------------------
-->#include<stdio.h>
   int isprime(int num)
   {
     int flag=0;
     for(int i=2;i*i<=num;i++)
     {
         if(num%i==0)
         {
            flag=1;
         }
     }
     if(flag==1)return 0;
     else return 1;
   }
   int main()
   {
     int n;
     scanf("%d",&n);
    for(int i=1;i<=n;i++){
      int res=isprime(i);
      if(res)
      {
        printf("%d ",i);
      }
     }
      
    }
 -----------------------------------------------------------
-->Recursion:-
---------------
   --> calling the fucntion itself is called recursion.
   -->There will be a base case for recursion type problems.
-->#include<stdio.h>
   void func(int n)
   {
        if(n==0)  //base case.
        { 
           return;
        }
        printf("%d ",n);
        func(n-1);            //the output will be printed from higher to lower
       //func(n-1);
         printf("%d ", n);   //the output  will be printed from lower to higher.
   }
   int main()
   {
       int n;
      scanf("%d",&n);
      func(n);
   }
---------------------------------------------------------------

